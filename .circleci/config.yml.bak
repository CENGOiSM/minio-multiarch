version: 2.0

shared: &shared
  working_directory: ~/circleci
  docker:
    - image: docker:18-git
  environment:
    - QEMU_VERSION=v2.11.0
    - GITHUB_REPO=minio/minio
    - REGISTRY=jessestuart
    - IMAGE=minio
  steps:
    - checkout
    - setup_remote_docker
    - run: apk add --no-cache curl bash jq musl-dev # go
    - run: uname -a
    # - run: docker run --rm --privileged multiarch/qemu-user-static:register
    # - run: docker run --rm --privileged multiarch/qemu-user-static:register --reset
    # - run: curl -O https://storage.googleapis.com/golang/go1.10.1.linux-amd64.tar.gz
    # - run: tar xzf go1.10.1.linux-amd64.tar.gz
    # - run: mv go /usr/local
    # - run: export GOROOT=/usr/local/go
    # - run: export GOPATH=$HOME/go
    # - run: eval "$(curl -sL https://raw.githubusercontent.com/travis-ci/gimme/master/gimme | GIMME_GO_VERSION=1.10.1 bash)"
    # - run: export GOARCH=${TAG}
    # - run: export PATH="$GOPATH/bin:$GOROOT/bin:$PATH"
    # - run: go version
    # - run: go env
    # - run: env | sort
    - run: curl -s https://api.github.com/repos/${GITHUB_REPO}/releases/latest | jq -r '.tag_name'
    # - run: |
    #     export VERSION="$(curl -s https://api.github.com/repos/${GITHUB_REPO}/releases/latest | jq -r '.tag_name')"
    #     VERSION="$(curl -s https://api.github.com/repos/${GITHUB_REPO}/releases/latest | jq -r '.tag_name')"
    #     echo $VERSION
    #     git clone https://github.com/${GITHUB_REPO} --depth=1 -b ${VERSION} ${IMAGE}
    # - run: export VERSION="$(curl -s https://api.github.com/repos/${GITHUB_REPO}/releases/latest | jq -r '.tag_name')"
    - run: env | sort
    # - run: git clone https://github.com/${GITHUB_REPO} --depth=1 -b ${VERSION} ${IMAGE}
    - run: mkdir -p $GOPATH/src/github.com/${IMAGE}
    - run: |
        if [[ ! -e ~/go ]];then
          wget -O /tmp/go.tgz https://redirector.gvt1.com/edgedl/go/go1.10.1.linux-amd64.tar.gz
          cd ~ && tar xvzf /tmp/go.tgz &>/dev/null
        fi

        # echo "Removing old go at /usr/local/go"
        # rm -rf /usr/local/go

        cp -rp ~/go /usr/local
        ls -al /usr/local/go
        ls -al ~/go

        env
        export GOARCH=${TAG}
        export GOROOT=/usr/lib/go
        export GOPATH=$HOME/go
        export PATH="$GOPATH/bin:$GOROOT/bin:$PATH"
        env
        echo -e ${PATH//:/\\n} | sort
        /usr/lib/go/bin/go env
        /usr/lib/go/bin/go version
        # go env
        # go version

        docker run --rm --privileged multiarch/qemu-user-static:register

        export VERSION="$(curl -s https://api.github.com/repos/${GITHUB_REPO}/releases/latest | jq -r '.tag_name')"
        VERSION="$(curl -s https://api.github.com/repos/${GITHUB_REPO}/releases/latest | jq -r '.tag_name')"
        echo $VERSION

        git clone https://github.com/${GITHUB_REPO} --depth=1 -b ${VERSION} ${IMAGE}

        # go get github.com/${GITHUB_REPO}
        pwd
        ls -alh
        mkdir -p $GOPATH/src/github.com/${IMAGE}
        mv ${IMAGE} $GOPATH/src/github.com/${IMAGE}
        cd $GOPATH/src/github.com/${GITHUB_REPO}
        go get .
        make
        curl -sL -o qemu-${QEMU_ARCH}-static.tar.gz https://github.com/multiarch/qemu-user-static/releases/download/${QEMU_VERSION}/qemu-${QEMU_ARCH}-static.tar.gz && tar zx -f qemu-${QEMU_ARCH}-static.tar.gz
    # - run: cd $GOPATH/src/github.com/${GITHUB_REPO}
    # # ========
    # # Get deps
    # # ========
    # - run: go get .
    # # =====
    # # Build
    # # =====
    # - run: make
    # # ========
    # # Get QEMU
    # # ========
    # - run: curl -sL -o qemu-${QEMU_ARCH}-static.tar.gz https://github.com/multiarch/qemu-user-static/releases/download/${QEMU_VERSION}/qemu-${QEMU_ARCH}-static.tar.gz && tar zx -f qemu-${QEMU_ARCH}-static.tar.gz
    # ===========
    # Build image
    # ===========
    # - run: docker run --rm --privileged multiarch/qemu-user-static:register
    - run: cp $(pwd)/Dockerfile.arm .
    # (Full qualified image name!)
    # - run: export IMAGE_ID="${REGISTRY}/${IMAGE}:${VERSION}-${TAG}"
    # - run: docker build -t ${IMAGE_ID} --build-arg target=$TARGET --build-arg arch=$QEMU_ARCH -f Dockerfile.arm .
    # ==========
    # Push image
    # ==========
    - run: echo $DOCKERHUB_PASS | docker login -u $DOCKERHUB_USER --password-stdin
    - run:
        name: Push image to Docker Hub.
        command: |
          export VERSION="$(curl -s https://api.github.com/repos/${GITHUB_REPO}/releases/latest | jq -r '.tag_name')"
          export IMAGE_ID="${REGISTRY}/${IMAGE}:${VERSION}-${TAG}"
          docker build -t ${IMAGE_ID} --build-arg target=$TARGET --build-arg arch=$QEMU_ARCH -f Dockerfile.arm .
          docker tag    "${IMAGE_ID}" "${IMAGE_ID}:circle-${CIRCLE_BUILD_NUM}"
          docker push                 "${IMAGE_ID}:circle-${CIRCLE_BUILD_NUM}"
          if [ "${CIRCLE_BRANCH}" = 'master' ]; then
            docker tag  "${IMAGE_ID}" "${IMAGE_ID}:latest"
            docker push               "${IMAGE_ID}:latest"
          fi


workflows:
  version: 2
  build:
    jobs:
      - "build-armhf"
      - "build-arm64"

jobs:
  "build-armhf":
    <<: *shared
    environment:
      QEMU_VERSION: v2.11.0
      GITHUB_REPO: minio/minio
      REGISTRY: jessestuart
      IMAGE: minio
      TARGET: arm64v8
      QEMU_ARCH: aarch64
      TAG: arm64
  "build-arm64":
    <<: *shared
    environment:
      QEMU_VERSION: v2.11.0
      GITHUB_REPO: minio/minio
      REGISTRY: jessestuart
      IMAGE: minio
      TARGET: arm32v6
      QEMU_ARCH: arm
      TAG: arm

    # steps:
    #   - checkout
    #   - setup_remote_docker

    #   - run:
    #       name: Authenticate with Docker Hub.
    #       command: |
    #         docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASS

    #   - run: uname -a

    #   - run: docker run --rm --privileged multiarch/qemu-user-static:register --reset

      # - run:
      #     name: Build Docker image.
      #     command: |
      #       docker build -t "${IMAGE_ID}" . -f Dockerfile.arm

      # - run:
      #     name: Push image to Docker Hub.
      #     command: |
      #       docker tag    "${IMAGE_ID}" "${IMAGE_ID}:circle-${CIRCLE_BUILD_NUM}"
      #       docker push                 "${IMAGE_ID}:circle-${CIRCLE_BUILD_NUM}"
      #       if [ "${CIRCLE_BRANCH}" = 'master' ]; then
      #         docker tag  "${IMAGE_ID}" "${IMAGE_ID}:latest"
      #         docker push               "${IMAGE_ID}:latest"
      #       fi


# version: 2.0

# shared: &shared
#     working_directory: ~/circleci-demo-workflows
#     steps:
#       - checkout
#       - run: bundle install --path vendor/bundle
#       - run: bundle exec rake db:create db:schema:load
#       - run:
#           name: Run tests
#           command: rake

# jobs:
#   "ruby-2.2":
#     <<: *shared
#     docker:
#       - image: circleci/ruby:2.2-node
#       - image: circleci/postgres:9.4.12-alpine

#   "ruby-2.3":
#     <<: *shared
#     docker:
#       - image: circleci/ruby:2.3-node
#       - image: circleci/postgres:9.4.12-alpine


#   "ruby-2.4":
#     <<: *shared
#     docker:
#       - image: circleci/ruby:2.4-node
#       - image: circleci/postgres:9.4.12-alpine

# workflows:
#   version: 2
#   build:
#     jobs:
#       - "ruby-2.2"
#       - "ruby-2.3"
#       - "ruby-2.4"

